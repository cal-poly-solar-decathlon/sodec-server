# Authentication

It appears to me that all we'll need here is to secure the wi-fi network
that the server appears on.

# Communication with sensor / hardware side

Use a socket?

# Devices / Device identifiers

There's a huge temptation to get too general, here, so that you can register
and unregister devices and get fresh IDs and yadda yadda yadda. I think that
the right thing here is to resist this temptation, and simply fix the set
of device identifiers ahead of time.

# Time

There's some serious issues to think about here. The server should probably be
"in charge of time", in the sense that it's responsible for keeping track
of the timestamp.  However, the tablets are also going to have to be able
to map the server's timestamps back to dates, so that they can display the
data with usable labels. I suppose the server is also going to have to
provide timestamp <-> UTC dates.

Time is such a pain.

# Event streams

Some devices are passive and continuous, like temperatures. Essentially,
there is always a temperature, it's just that we sample it only
occasionally (5 sec?).

Other devices are passive but discrete, like occupancy sensors. These
are not like temperature sensors; instead, there's a stream of discrete
events, e.g. "occupancy on" and "occupancy off". Push notification is
probably more important for these sensors.

Hmm... thinking more about APIs, though, I'm not sure there's going
to be a distinction. Despite the continuous nature of sensors like
temperature sensors, readings are probably going to arrive in exactly
the same way as those from discrete events.

Other devices are active.  There's no distinction between continuous
and discrete, here; a control message simply goes out to a device.

Do we need an "ack" for control messages? I think not. ... But I
*do* think that we need some way to query the stream of control
messages, so that for instance tablet B has some way of knowing that
tablet "A" has just turned on the lights.

So basically, I think that every control stream should also be a
discrete input stream.

# Push / Pull

I'd love for the server to be purely REST---if you want to know what
the temperature is now, you ask me---but I don't think this is going
to work.  In particular, I don't think the devices can afford to
simply poll the heck out of the server to determine when things change.
Also, you want to make sure that every state change is signaled
only once.

The solution, and I'm afraid it's going to be a bit of a pain, is for
the devices to "register" themselves with the server.  That is:

a) a device registers its IP address with the server.
b) the server then sends it a message---presumably, by making a PUT
   or POST request---every time a state changes.

The server will also need some way to avoid timeouts, and to abandon
registered devices that leave.

API, here:

/register-tablet?ip=xxx.xxx.xxx.xxx

response: { unregister-token: "AOUH3THOT" }

... can the IP address be discovered from the HTTP request? I think not.

Should we worry about "bad tablets" that unregister other tablets? Probably
not, at least not initially.

/unregister-tablet?token=AOUH3THOT

Unregister this tablet.

Of course, as I mentioned before, most of the unregisters are going
to be involuntary.

Hmm... we probably need a "heartbeat".

/heartbeat

... that just gets sent every two or three seconds, to tell the tablets
that they're still registered.

# Simple REST Api

Independent of the Push interface, I think there's going to have
to be a simple REST interface for fetching historical data.

# Stress Testing

Super important!
