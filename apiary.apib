FORMAT: 1A
HOST: http://calpolysolardecathlon.org:8080

# Solar Decathlon Automation
This API governs the interaction between the solar decathlon wireless client 
tablets and the central home automation server.

## Devices

## Measurements

All recorded measurements must fall into one of these measurement categories:

- `temperature`
- `humidity`
- `electric_power`
- `light_level`
- `occupied`

## Devices

Device names specify locations. Each measurement has its own set of legal
device names.

### Temperature and Humidity Devices

- `living_room`
- `bedroom`
- `kitchen`
- `outside`
- `bathroom`
- `testing_blackhole`

### Electric Power devices

In order to maintain flexibility, we're just going to go with the flow,
and accept whatever device ids come in from the eGauge. Note that no
distinction is made here between power generated and power used.

Sigh... looks like on the *app* side, it may be easier to hard-code these,
depending on the interface. Here are the ones I've got right now:

- main_solar_array X
- bifacial_solar_array X
- laundry X
- dishwasher X
- refrigerator X
- induction_stove (Cooktop) X
- water_heater (Solar Water Heater) X
- greywater_pump X
- blackwater_pump X
- thermal_loop_pump X
COMBINE THESE:
- water_supply_pump X
- water_supply_booster_pump (?? didn't get connected)
- vehicle_charging X
- mechanical_room_outlets X
- heat_pump (heat recovery ventilation) X WRONG... ... DELETED.
- heat_recovery_ventilation
- air_handler (air handler outlets) X
NEW
- mains X
- air_conditioning X
- microwave X
- lighting_1 X
- lighting_2 X
OLD
kitchen_outlets_1
kitchen_outlets_2
living_room_outlets
dining_room_outlets_1
dining_room_outlets_2
bathroom_outlets
bedroom_outlets_1
bedroom_outlets_2
entry_hall_outlets
exterior_outlets

Since the server is dynamic (it can handle whatever the eGauge provides), the
basic rule is that the *app* must agree with the *egauge*. We have control
over both of these, so it shouldn't be too bad. Once we start accumulating data,
things get much harder to move around.

The "old" ones are probably not going to occur in the house, but we'll continue
generating mock data for them just in case.


## Representing Sensor Readings

Sensor readings are encoded as signed 64-bit integers.

For temperatures, these
are 10ths of celsius degrees. So, for instance, the temperature -3.4 degrees
celsius would be represented as -34.

Humidities are reported in 10ths of
a percent of relative humidity. So, for instance, 78.4% humidity would
be represented as 784.

Light settings are specified as tenths of a percent
(like humidity). So, for instance, a light that's on would be represented
as 1000, and one set at 20% would be represented as 200.

Electrical power readings are specified in CUMULATIVE watt-seconds.
Note that this counter can *definitely* run backward, particularly in the case
of the mains, where we expect to be pushing power out most of the time.

PLEASE NOTE: under some circumstances, this counter may get reset. Display
modules should be cognizant of this, and do the best they can if this
value is seen to drop.

## Implementation

# Group Server

This API describes calls that the clients make to the server.

# Ping [/srv/ping]

Checks that the server is alive.

## Ping [GET]

+ Response 200 (application/json)

    + Body

            "alive"


# Timestamp [/srv/timestamp]

The current timestamp from the server (represented as seconds since epoch
UTC on server).

## Timestamp [GET]

+ Response 200 (application/json)

    + Body

            {
                "timestamp":1418096756
            }


# Device Latest Event [/srv/latest-event{?measurement,device}]

The last event of the given device. Returns "no events" if no events available.

+ Parameters
    + measurement (string) ... the kind of measurement (temperature, etc.)
    + device (string) ... the id of the selected device


## Latest Event [GET]

+ Response 200 (application/json)

    + Body
            {status}


# Device Last Event in Interval [/srv/interval-last-event{?measurement,device,start,end}]

The last event of the given device in the given interval. Returns "no events"
if no events available.

+ Parameters
    + measurement (string) ... the kind of measurement (temperature, etc.)
    + device (string) ... the id of the selected device
    + start (number) ... the timestamp (in seconds) of the beginning of the desired range
    + end (number) ... the timestamp (in seconds) of the end of the desired range

## Latest Event [GET]

+ Response 200 (application/json)

    + Body
            {status}

# Device First Event in Interval [/srv/interval-first-event{?measurement,device,start,end}]

The first event of the given device in the given interval. Returns "no events"
if no events available. Returns the actual timestamp of the event.

+ Parameters
    + measurement (string) ... the kind of measurement (temperature, etc.)
    + device (string) ... the id of the selected device
    + start (number) ... the timestamp (in seconds) of the beginning of the desired range
    + end (number) ... the timestamp (in seconds) of the end of the desired range

## Latest Event [GET]

+ Response 200 (application/json)

    + Body
            {t:1444007021000,r:230}



# Post a sensor reading [/srv/record-reading{?device}]

## Record Reading [POST]

A Post request adds new data, using the server's current
timestamp. There's a (plaintext) secret used to validate
the sender. Since this request just travels over the local
wire, we don't need to worry about encrypting it. Famous
last words.

+ Request (application/json)

            {
                "status":{status},
                "secret":{secret}
            }

+ Response 200 (application/json)

    + Body

            "okay"


# Device Subsampling by Mean [/srv/mean-by-interval{?measurement,device,start,end,interval}]

Aggregate the data by returning the mean reading for each interval in the given range.
Ranges that don't have any data will return the reading 'false'.

NB: this will probably be valuable for temperature & humidity, but electrical power
is probably best measured using `first-by-interval`.

Note that timestamps are in millisecond timestamps

+ Parameters
    + measurement (string) ... the measurement
    + device (string) ... the selected device
    + start (number) ... the timestamp (in seconds) of the beginning of the desired range
    + end (number) ... the timestamp (in seconds) of the end of the desired range
    + interval (number) ... the interval length (in seconds)

## Get the mean value of each interval [GET]

+ Response 200 (application/json)

    + Body

            [{t:1442551980533,r:225},
             {t:1442551985533,r:228},
             {t:1442551990533,r:false},
             {t:1442551995533,r:198}]

GRR! Because of InfluxDB's inconsistency, the whole thing may also just return

"no events"



# Device Subsampling by first event in range [/srv/first-by-interval{?measurement,device,start,end,interval}]

Return the first event in each interval.

+ Parameters
    + measurement (string) ... the measurement
    + device (string) ... the selected device
    + start (number) ... the timestamp (in seconds) of the beginning of the desired range
    + end (number) ... the timestamp (in seconds) of the end of the desired range
    + interval (number) ... the interval length (in seconds)

## Get the first event in each interval [GET]

For consistency, times are in milliseconds.  Right now, the time is
NOT the actual time of the first event, but simply the time that begins
the interval

+ Response 200 (application/json)

    + Body

            [{t:282379,r:229873},
             {t:282483,r:229874}]


# Device Subsampling by last event in range [/srv/last-by-interval{?measurement,device,start,end,interval}]

Return the last event in each interval. This will probably be the most
useful way to aggregate power readings.

+ Parameters
    + measurement (string) ... the measurement
    + device (string) ... the selected device
    + start (number) ... the timestamp (in seconds) of the beginning of the desired range
    + end (number) ... the timestamp (in seconds) of the end of the desired range
    + interval (number) ... the interval length (in seconds)

## Get the last event in each interval [GET]

For consistency, times are in milliseconds.  Right now, the time is
NOT the actual time of the first event, but simply the time that begins
the interval

+ Response 200 (application/json)

    + Body

            [{t:282379,r:229873},
             {t:282483,r:229874}]



# Device Event Range [/srv/events-in-range{?measurement,device,start,end}]

Fetch all events in the given range. More specifically, those with
timestamps `n` such that `start <= n < end`. Currently, the difference
between 'start' and 'end' can't be greater than 3600 seconds, to
limit the size of the response.

+ Parameters
    + measurement (string) ... the measurement
    + device (string) ... the selected device
    + start (number) ... the timestamp (in seconds) of the beginning of the desired range
    + end (number) ... the timestamp (in seconds) of the end of the desired range


## Get events in a range [GET]

NB: the responses have times in MILLISECONDS. Given the 53 bits of mantissa
in an IEEE 754 double, this should be plenty, allowing us to represent
dates up until the year 287,396.

+ Response 200 (application/json)

    + Body

            [{t:282379,r:229873},
             {t:282483,r:229874}]

# Count Device Events [/srv/count-events-in-range{?device,start,end}

+ Parameters
    + device (string) ... the id of the selected device
    + start (number) ... the timestamp of the beginning of the desired range
    + end (number) ... the timestamp of the end of the desired range

## Count events in a range [GET]

Returns a number representing the number of events in a time range.

+ Response 200 (application/json)

    + Body

            24739

