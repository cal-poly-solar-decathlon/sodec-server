#lang racket/base

(require racket/contract
         racket/match
         racket/date
         racket/pretty
         racket/runtime-path
         (only-in racket/list add-between))

(define-runtime-path here ".")

(provide (contract-out (parse-device-name
                        [->* (string?) (string? string?)])))

(define measurements
  '(temperature humidity electricity_used
                electricity_generated
                light_level
                bogus))

(define temp-lookup
  '((lr living_room)
    (bed bedroom)
    (kit kitchen)
    (out outside)
    (bath bathroom)
    (testing-blackhole testing_blackhole)
    (testing-empty testing_empty)))

(define temp-hum-table
  (map (lambda (pr) (cons (car pr) (map symbol->string (cdr pr))))
        (append
         (for/list ([device temp-lookup])
           (cons (string-append "s-temp-"(symbol->string (car device)))
                 `(temperature ,(cadr device))))
         (for/list ([device temp-lookup])
           (cons (string-append "s-hum-" (symbol->string (car device)))
                 `(humidity ,(cadr device)))))))


(define electricity-text
  "- `s-elec-used-laundry` (Laundry Circuit) : energy consumption for dryer/washer circuit
- `s-elec-used-dishwasher` (Dishwasher Circuit) : energy consumption for dishwasher circuit
- `s-elec-used-refrigerator` (Refrigerator Circuit) : energy consumption for refrigerator circuit
- `s-elec-used-induction-stove` (Induction Stove Circuit): energy consumption for induction stove circuit
- `s-elec-used-ewh-solar-water-heater` (Water Heater Circuit) : energy consumption for ewh solar water heater circuit
- `s-elec-used-kitchen-receps-1` (Kitchen Outlets 1) : energy consumption for kitchen receps 1 circuit
- `s-elec-used-kitchen-receps-2` (Kitchen Outlets 2) : energy consumption for kitchen receps 2 circuit
- `s-elec-used-living-receps` (Living Room Outlets) : energy consumption for living receps circuit
- `s-elec-used-dining-receps-1` (Dining Room Outlets 1) : energy consumption for dining receps 1 circuit
- `s-elec-used-dining-receps-2` (Dining Room Outlets 2) : energy consumption for dining receps 2 circuit
- `s-elec-used-bathroom-receps` (Bathroom Outlets): energy consumption for bathroom receps circuit
- `s-elec-used-bedroom-receps-1` (Bedroom Outlets 1) : energy consumption for bedroom receps 1 circuit
- `s-elec-used-bedroom-receps-2` (Bedroom Outlets 2) : energy consumption for bedroom receps 2 circuit
- `s-elec-used-mechanical-receps` (Mechanical Room Outlets) : energy consumption for mechanical receps circuit
- `s-elec-used-entry-receps` (Entry Hall Outlets) : energy consumption for entry receps circuit
- `s-elec-used-exterior-receps` (Exterior Outlets) : energy consumption for exterior recep circuit
- `s-elec-used-grey-water-pump-recep` (Greywater Pump Circuit) : energy consumption for grey water pump recep circuit
- `s-elec-used-black-water-pump-recep` (Blackwater Pump Circuit) : energy consumption for black water pump recep circuit
- `s-elec-used-thermal-loop-pump-recep` (Thermal Loop Pump Circuit) : energy consumption for thermal loop pump recep circuit
- `s-elec-used-water-supply-pump-recep` (Water Supply Pump Circuit) : energy consumption for water supply pump recep circuit
- `s-elec-used-water-supply-booster-pump-recep` (Water Supply Booster Pump Circuit) : energy consumption for water supply booster pump recep circuit
- `s-elec-used-vehicle-charging-recep` (Vehicle Charging Circuit) : energy consumption for vehicle charging recep circuit
- `s-elec-used-heat-pump-recep` (Heat Pump Circuit) : energy consumption for heat pump recep circuit
- `s-elec-used-air-handler-recep` (Air Handler Circuit) : energy consumption for air handler recep circuit
- `s-elec-gen-main-array` (Main Solar Array) : power generated by the main array panels
- `s-elec-gen-bifacial` (Bifacial Solar Array) : power generated by the bifacial array panels")

(define electricity-lines (regexp-split #px"\n" electricity-text))

(define (process line)
  (match (regexp-match #px"^- `([-A-Za-z0-9]+)` \\(([^\\)]+)\\)" line)
    [(list dc id text)
     (define text2
       (cond [(string=? (substring text (- (string-length text) 8))
                        " Circuit")
              (substring text 0 (- (string-length text) 8))]
             [else text]))
     (define measurement
       (cond [(string=? (substring id 0 12) "s-elec-used-") "electricity_used"]
             [else "electricity_generated"]))
     (cons
      id
      (list measurement (regexp-replace* #px" " (string-downcase text2) "_")))]
    [#f (error 'process "failed on line: ~e" line)]))

(define electricity-table
  (map process electricity-lines))

(define devices-table
  (append temp-hum-table
          electricity-table))

(with-output-to-file (build-path here "device-table.rktd")
  #:exists 'truncate
  (lambda ()
    (pretty-write devices-table)))

;; given an existing device name, return measurement and new device name
(define (parse-device-name name)
  (match (regexp-split #px"-" name)
    [(list-rest #"s" #"temp" temp-name-list)
     (define temp-name
       (string->symbol
        (apply string-append
               (add-between (map bytes->string/utf-8 temp-name-list) "-"))))
     (match (assoc temp-name
                   temp-lookup)
       [(list dc new-name)
        (list "temperature" (symbol->string new-name))]
       [#f (error 'parse-device-name "no match in table for ~v" temp-name)])]
    [(list #"s" #"hum" hum-name)
     (match (assoc (string->symbol
                    (bytes->string/utf-8
                     hum-name))
                   temp-lookup)
       [(list dc new-name)
        (list "humidity" (symbol->string new-name))]
       [#f (error 'parse-device-name
                  "no match in table for ~v" hum-name)])]
    [(list #"c" #"light" light-name)
     (list "bogus" light-name)]
    [other
     (error 'parse-device-name
            "giving up on ~v" other)]))

(module+ test
  (require rackunit)
  (check-equal? (parse-device-name #"s-temp-lr")
                (list "temperature" "living_room"))
  (check-equal? (parse-device-name #"s-temp-testing-blackhole")
                (list "temperature" "testing_blackhole")))







