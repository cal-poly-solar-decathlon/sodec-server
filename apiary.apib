FORMAT: 1A
HOST: http://calpolysolardecathlon.org:8080

# Solar Decathlon Automation
This API governs the interaction between the solar decathlon wireless client 
tablets and the central home automation server.

## Devices

Devices are named by IDs, which are strings. These strings are essentially
hard-coded; it's easier that way. There are two kinds of IDs: "sensor IDs"
and "control IDs". I think it will be easier just to have a convention
to distinguish them. This is going to reek of 1990's Microsoft hungarian
notation, but who cares.

places:
- `out` - north outside wall,
- `bed` - bedroom,
- `bath` - bathroom,
- `lr` - living room
- `mech` - mechanical room

Sensors (taken from 2015/02/20 drawings):

- `hum` : Humidity : out, bed, bath, lr
- `amb` : Ambient Light: bed, mech, lr, bath
- `occ` : Occupancy sensors: bed, mech, lr, bath

### List of IDS taken from 2015-02-20 construction drawings.

Lights are completely up in the air. The rest of them seem plausible.


- `s-temp-out` : the temperature in the outside north wall
- `s-temp-bed` : the temperature in the bedroom
- `s-temp-bath` : the temperature in the bathroom
- `s-temp-lr` : the temperature in the living room
- `s-hum-out` : the humidity in the outside north wall
- `s-hum-bed` : the humidity in the bedroom
- `s-hum-bath` : the humidity in the bathroom
- `s-hum-lr` : the humidity in the living room
- `s-occ-bed` : whether the bedroom is occupied
- `s-occ-mech` : whether the mechanical room is occupied
- `s-occ-lr` : whether the living room is occupied
- `s-occ-bath` : whether the bathroom is occupied
- `s-amb-bed` : the ambient light level in the bedroom
- `s-amb-mech` : the ambient light level in the mechanical room
- `s-amb-lr` : the ambient light level in the living room
- `s-amb-bath` : the ambient light level in the bathroom
- `c-light-bed` : control of the lights in the bedroom
- `c-light-mech` : control of the lights in the mechanical room
- `c-light-lr` : control of the lights in the living room
- `c-light-bath` : control of the lights in the bathroom
- `c-light-kit` : control of the lights in the kitchen
- `s-temp-testing-blackhole` : a temperature bin to test recording
- `s-temp-testing-empty` : a temperature bin that's always empty

## Representing Sensor Readings

Sensor readings are encoded as 64-bit integers. For temperatures, these
are 10ths of celsius degrees. 

## Implementation

Currently, the test server implements only the resources listed as 
[IMPLEMENTED]. 

# Group Server

This API describes calls that the clients make to the server.

# Ping [/srv/ping]

Checks that the server is alive. [IMPLEMENTED]

## Ping [GET]

+ Response 200 (application/json)

    + Body

            "alive"


# Timestamp [/srv/timestamp]

The current timestamp from the server (represented as seconds since epoch on 
server). [IMPLEMENTED]

## Timestamp [GET]

+ Response 200 (application/json)

    + Body

            {
                "timestamp":1418096756
            }


# Timestamp From Date [/srv/timestamp/from-date{?date}]

*[NOTE: I've waffled quite a bit over what API to provide here; we want
the server to be in charge of time, but we don't want the clients
to be hammering the server to see what every timestamp means.
I think the right compromise is to provide a call that allows
the clients to "get their bearings" by converting a midnight-UTC date to a
timestamp, but not vice versa.]*

+ Parameters
    + date (json) ... the requested date{"year":number,"month":number,"day":number}


## Compute the timestamp for a UTC midnight date [GET]

+ Response 200 (application/json)

    + Body

            {
                "timestamp":1418096756
            }


# Device Latest Event [/srv/latest-event{?device}]

The last event of the given device. [IMPLEMENTED]

+ Parameters
    + device (string) ... the id of the selected device

## Latest Event [GET]

+ Response 200 (application/json)

    + Body

            {
                "device-id":{id}
                "status":{status},
                "timestamp":{timestamp}
            }

# Post a sensor reading [/srv/record-reading{?device}]

## Record Reading [POST]

A Post request adds new data, using the server's current
timestamp. There's a (plaintext) secret used to validate
the sender. Since this request just travels over the local
wire, we don't need to worry about encrypting it. Famous
last words.

+ Request (application/json)

            {
                "status":{status},
                "secret":{secret}
            }

+ Response 200 (application/json)

    + Body

            "okay"


# Device Event Range [/srv/events-in-range{?device,start,end}]

Fetch all events in the given range. More specifically, those with
timestamps `n` such that `start <= n < end`. Currently, the difference
between 'start' and 'end' can't be greater than 3600 seconds, to
limit the size of the response.
[IMPLEMENTED]

+ Parameters
    + device (string) ... the id of the selected device
    + start (number) ... the timestamp of the beginning of the desired range
    + end (numbe) ... the timestamp of the end of the desired range


## Get events in a range [GET]

To save space on the wire, the data is delivered as a sequence of deltas. More
specifically, the initial timestamp and status are delivered in full. Following
this, the remainder of the readings are delivered as a sequence of sequences
of length 2, where each element contains the number of seconds since the prior
reading and the difference in the status since the last reading.

+ Response 200 (application/json)

    + Body

            {baseTimestamp:1418096755,
             baseStatus:224,
             seriesData:[[5,5],[5,0],[5,-2],[5,4]]}


# Subscribe to Events [/srv/subscribe]

Register a client with the server, to receive all events as they occur.
NB: There's no unsubscribe; I don't think it'll ever be necessary, and
the server will have to handle disappearing subscribers anyway.

## Subscribe [POST]

Some authentication here might be nice.  I'm going to leave it
out for now.

+ Request (application/json)

    + Body

            {"ip":"xxx.xxx.xxx.xxx"}

+ Response 200 (application/json)

    + Body

            true


# Group Client

# Notify [/totally/bogus]

Notification that an event has occurred.

As an aside, this model (that is, apiary) is totally broken... I can't refer to a model
from outside? There are some major issues here.

## Event [/client/notify]

Messages sent from the server to a subscribed client

+ Model (application/json)

    A JSON object representing a control or sensor event

    As a side note... this JSON schema mechanism is... weak.

    + Body

            {   "type": "controlorsensor",
                "device" : "thedevicename",
                "timestamp" : 472379717,
                "reading" : 2271938470
            }


### Notify [POST]

+ Request (application/json)
    [Event][]

+ Response 200 (application/json)

    + Body

            true

