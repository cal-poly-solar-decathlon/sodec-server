#lang racket/base

(require (only-in racket/format ~a)
         racket/match
         (only-in racket/list first second third))

(define rooms'(("lr" "living room")
               ("bath" "bathroom")
               ("kit" "kitchen")
               ("bed" "bedroom")
               ("mech" "mechanical room")
               ("out" "outside north wall")))

;; generate the list of device names. Used to populate the
;; database.  This list must also match the one in ids.rkt

(provide device-names device-strs light-names)

;- `hum` : Humidity : out, bed, bath, lr
;- `amb` : Ambient Light: bed, mech, lr, bath
;- `occ` : Occupancy devices: bed, mech, lr, bath


(define device-patterns
  '(("s-temp" ("out" "bed" "bath" "lr" "kit") "the temperature in the ~a")
    ("s-hum" ("out" "bed" "bath" "lr" "kit") "the humidity in the ~a")
    ("s-occ" ("bed" "mech" "lr" "bath") "whether the ~a is occupied")
    ("s-amb" ("bed" "mech" "lr" "bath") "the ambient light level in the ~a")
    #;("c-light" ("bed" "mech" "lr" "bath" "kit") "control of the lights in the ~a")
    #;("s-light" "a record of the lighting control events in the ~a")))

(define light-spec
  "Entry Bookend (1A)
Chandelier (1B)
TV Light (2A)
Kitchen Uplight (3A)
Under-Counter (3B)
Pendant Bar Lights (3C)
Bathroom Ambient (4A)
Mirror (4B)
Flexspace Uplight (5A)
Flexspace Cabinet (5B)
Bedroom Uplight (6A)
Bedroom Cabinet (6B)
Porch Lights (8A)
Uplights and Pot Lights (8B)")

(define branch-circuits
  '(laundry
    dishwasher
    refrigerator 
    induction-stove
    ewh-solar-water-heater
    kitchen-receps-1
    kitchen-receps-2
    living-receps
    dining-receps-1
    dining-receps-2
    bathroom-receps
    bedroom-receps-1
    bedroom-receps-2
    mechanical-receps
    entry-receps
    exterior-receps
    grey-water-pump-recep
    black-water-pump-recep
    thermal-loop-pump-recep
    water-supply-pump-recep
    water-supply-booster-pump-recep
    vehicle-charging-recep
    heat-pump-recep
    air-handler-recep))

(define branch-circuit-devices
  (for/list ([circuit (in-list branch-circuits)])
    (list (~a "s-elec-used-"circuit) "...")))

(define power-generation-devices
  (for/list ([circuit (in-list (list "main-array" "bifacial-array"))])
    (list (~a "s-elec-gen-" circuit) (~a "power generated by the "circuit" panels"))))


(define extra-devices
  '(("s-temp-testing-blackhole" "a temperature bin to test recording")
    ("s-temp-testing-empty" "a temperature bin that's always empty")))

(define light-names
  (for/list ([light-line (in-list (regexp-split #px"\n" light-spec))])
    (match (regexp-match #px"^(.*)\\(([0-9]+)([ABC])\\)" light-line)
      [(list _ name room-num index)
       (~a "s-light-" (regexp-replace* #px" " (string-downcase name) "-")
           room-num index)])))

(define all-devices
  (append
   (for*/list ([pat (in-list device-patterns)]
               [r (in-list (second pat))])
     (list (~a (first pat)"-"r)
           (format (third pat) (second (assoc r rooms)))))
   (append branch-circuit-devices power-generation-devices extra-devices)
   (for/list ([l (in-list light-names)])
     (list l "..."))))

(define (print-device-spec)
  (for-each
   display
   (append
    (for/list ([pr (in-list all-devices)])
      (~a "- `"(first pr)"` : "(second pr)"\n")))))

;(print-device-spec)

;; as strings, for ids.rkt:
(define device-strs
  (map first all-devices))

(define device-names
  (map string->symbol device-strs))
