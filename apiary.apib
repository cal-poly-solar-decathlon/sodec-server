FORMAT: 1A
HOST: http://calpolysolardecathlon.org:8080

# Solar Decathlon Automation
This API governs the interaction between the solar decathlon wireless client 
tablets and the central home automation server.

## Devices

Devices are named by IDs, which are strings. These strings are essentially
hard-coded; it's easier that way. There are two kinds of IDs: "sensor IDs"
and "control IDs". I think it will be easier just to have a convention
to distinguish them. This is going to reek of 1990's Microsoft hungarian
notation, but who cares.

places:
- `out` - north outside wall,
- `bed` - bedroom,
- `bath` - bathroom,
- `lr` - living room
- `mech` - mechanical room

Sensors (taken from 2015/02/20 drawings):

- `hum` : Humidity : out, bed, bath, lr
- `amb` : Ambient Light: bed, mech, lr, bath
- `occ` : Occupancy sensors: bed, mech, lr, bath

### Current List of IDs

- `s-temp-out` (Outside Temperature) : the temperature in the outside north wall
- `s-temp-bed` (Bedroom Temperature) : the temperature in the bedroom
- `s-temp-bath` (Bathroom Temperature) : the temperature in the bathroom
- `s-temp-lr` (Living Room Temperature) : the temperature in the living room
- `s-hum-out` (Outside Humidity) : the humidity in the outside north wall
- `s-hum-bed` (Bedroom Humidity) : the humidity in the bedroom
- `s-hum-bath` (Bathroom Humidity) : the humidity in the bathroom
- `s-hum-lr` (Living Room Humidity) : the humidity in the living room
- `s-occ-bed` (Bedroom Occupancy) : whether the bedroom is occupied
- `s-occ-mech` (Mechanical Room Occupancy) : whether the mechanical room is occupied
- `s-occ-lr` (Living Room Occupancy) : whether the living room is occupied
- `s-occ-bath` (Bathroom Occupancy) : whether the bathroom is occupied
- `s-amb-bed` (Bedroom Ambient Light) : the ambient light level in the bedroom
- `s-amb-mech` (Mechanical Room Ambient Light) : the ambient light level in the mechanical room
- `s-amb-lr` (Living Room Ambient Light) : the ambient light level in the living room
- `s-amb-bath` (Bathroom Ambient Light) : the ambient light level in the bathroom
- `c-light-bed` (Bedroom Light Control) : control of the lights in the bedroom
- `c-light-mech` (Mechanical Room Light Control) : control of the lights in the mechanical room
- `c-light-lr` (Living Room Light Control) : control of the lights in the living room
- `c-light-bath` (Bathroom Light Control) : control of the lights in the bathroom
- `c-light-kit` (Kitchen Light Control) : control of the lights in the kitchen
- `s-elec-used-laundry` : energy consumption for dryer/washer circuit
- `s-elec-used-dishwasher` : energy consumption for dishwasher circuit
- `s-elec-used-refrigerator` : energy consumption for refrigerator circuit
- `s-elec-used-induction-stove` : energy consumption for induction stove circuit
- `s-elec-used-ewh-solar-water-heater` : energy consumption for ewh solar water heater circuit
- `s-elec-used-kitchen-receps-1` : energy consumption for kitchen receps 1 circuit
- `s-elec-used-kitchen-receps-2` : energy consumption for kitchen receps 2 circuit
- `s-elec-used-living-receps` : energy consumption for living receps circuit
- `s-elec-used-dining-receps-1` : energy consumption for dining receps 1 circuit
- `s-elec-used-dining-receps-2` : energy consumption for dining receps 2 circuit
- `s-elec-used-bathroom-receps` : energy consumption for bathroom receps circuit
- `s-elec-used-bedroom-receps-1` : energy consumption for bedroom receps 1 circuit
- `s-elec-used-bedroom-receps-2` : energy consumption for bedroom receps 2 circuit
- `s-elec-used-mechanical-receps` : energy consumption for mechanical receps circuit
- `s-elec-used-entry-receps` : energy consumption for entry receps circuit
- `s-elec-used-exterior-receps` : energy consumption for exterior recep circuit
- `s-elec-used-grey-water-pump-recep` : energy consumption for grey water pump recep circuit
- `s-elec-used-black-water-pump-recep` : energy consumption for black water pump recep circuit
- `s-elec-used-thermal-loop-pump-recep` : energy consumption for thermal loop pump recep circuit
- `s-elec-used-water-supply-pump-recep` : energy consumption for water supply pump recep circuit
- `s-elec-used-water-supply-booster-pump-recep` : energy consumption for water supply booster pump recep circuit
- `s-elec-used-vehicle-charging-recep` : energy consumption for vehicle charging recep circuit
- `s-elec-used-heat-pump-recep` : energy consumption for heat pump recep circuit
- `s-elec-used-air-handler-recep` : energy consumption for air handler recep circuit
- `s-temp-testing-blackhole` (Blackhole Temperature) : a temperature bin to test recording
- `s-temp-testing-empty` (Empty Temperature) : a temperature bin that's always empty
- `s-light-entry-bookend-1A` (Entry Bookend Light)
- `s-light-chandelier-1B` (Chandelier Light)
- `s-light-tv-light-2A` (TV Light)
- `s-light-kitchen-uplight-3A` (Kitchen Uplight Light)
- `s-light-under-counter-3B` (Kitchen Under-Counter Light)
- `s-light-pendant-bar-lights-3C` (Kitchen Pendant Bar Lights)
- `s-light-bathroom-ambient-4A` (Bathroom Light)
- `s-light-mirror-4B` (Bathroom Mirror Light)
- `s-light-flexspace-uplight-5A` (Flexspace Uplight Light)
- `s-light-flexspace-cabinet-5B` (Flexspace Cabinet Light)
- `s-light-bedroom-uplight-6A` (Bedroom Uplight Light)
- `s-light-bedroom-cabinet-6B` (Bedroom Cabinet Light)
- `s-light-porch-lights-8A` (Porch Lights)
- `s-light-uplights-and-pot-lights-8B` (Uplights/Pot Lights)

## Representing Sensor Readings

Sensor readings are encoded as signed 64-bit integers.

For temperatures, these
are 10ths of celsius degrees. So, for instance, the temperature -3.4 degrees
celsius would be represented as -34.

Humidities are reported in 10ths of
a percent of relative humidity. So, for instance, 78.4% humidity would
be represented as 784.

Light settings are specified as tenths of a percent
(like humidity). So, for instance, a light that's off would be represented
as 1000, and one set at 20% would be represented as 200.

Electrical usage readings are specified in CUMULATIVE milliwatt-hours.
PLEASE NOTE: under some circumstances, this counter may get reset. Display
modules should be cognizant of this, and do the best they can if this
value is seen to drop.

## Implementation

Currently, the test server implements only the resources listed as 
[IMPLEMENTED].

# Group Server

This API describes calls that the clients make to the server.

# Ping [/srv/ping]

Checks that the server is alive. [IMPLEMENTED]

## Ping [GET]

+ Response 200 (application/json)

    + Body

            "alive"


# Timestamp [/srv/timestamp]

The current timestamp from the server (represented as seconds since epoch
UTC on server). [IMPLEMENTED]

## Timestamp [GET]

+ Response 200 (application/json)

    + Body

            {
                "timestamp":1418096756
            }

# Devices [/srv/list-devices]

The list of devices and descriptions from the server.

## Devices [GET]

+ Response 200 (application/json)

    + Body

            [{"device":"s-temp-out","description":"Outside Temperature"},
             {"device":"s-temp-bed",description":"Bedroom Temperature"}]

# Device Latest Event [/srv/latest-event{?device}]

The last event of the given device. [IMPLEMENTED]

+ Parameters
    + device (string) ... the id of the selected device

## Latest Event [GET]

+ Response 200 (application/json)

    + Body

            {
                "device-id":{id}
                "status":{status},
                "timestamp":{timestamp}
            }

# Post a sensor reading [/srv/record-reading{?device}]

## Record Reading [POST]

A Post request adds new data, using the server's current
timestamp. There's a (plaintext) secret used to validate
the sender. Since this request just travels over the local
wire, we don't need to worry about encrypting it. Famous
last words.

+ Request (application/json)

            {
                "status":{status},
                "secret":{secret}
            }

+ Response 200 (application/json)

    + Body

            "okay"


# Device Event Range [/srv/events-in-range{?device,start,end}]

Fetch all events in the given range. More specifically, those with
timestamps `n` such that `start <= n < end`. Currently, the difference
between 'start' and 'end' can't be greater than 3600 seconds, to
limit the size of the response.
[IMPLEMENTED]

+ Parameters
    + device (string) ... the id of the selected device
    + start (number) ... the timestamp of the beginning of the desired range
    + end (numbe) ... the timestamp of the end of the desired range


## Get events in a range [GET]

To save space on the wire, the data is delivered as a sequence of deltas. More
specifically, the initial timestamp and status are delivered in full. Following
this, the remainder of the readings are delivered as a sequence of sequences
of length 2, where each element contains the number of seconds since the prior
reading and the difference in the status since the last reading. If there
are no events in the range, the server returns the json string "no events".

+ Response 200 (application/json)

    + Body

            {baseTimestamp:1418096755,
             baseStatus:224,
             seriesData:[[5,5],[5,0],[5,-2],[5,4]]}


# Subscribe to Events [/srv/subscribe]

Register a client with the server, to receive all events as they occur.
NB: There's no unsubscribe; I don't think it'll ever be necessary, and
the server will have to handle disappearing subscribers anyway.

## Subscribe [POST]

Some authentication here might be nice.  I'm going to leave it
out for now.

+ Request (application/json)

    + Body

            {"ip":"xxx.xxx.xxx.xxx"}

+ Response 200 (application/json)

    + Body

            true


# Group Client

# Notify [/totally/bogus]

Notification that an event has occurred.

As an aside, this model (that is, apiary) is totally broken... I can't refer to a model
from outside? There are some major issues here.

## Event [/client/notify]

Messages sent from the server to a subscribed client

+ Model (application/json)

    A JSON object representing a control or sensor event

    As a side note... this JSON schema mechanism is... weak.

    + Body

            {   "type": "controlorsensor",
                "device" : "thedevicename",
                "timestamp" : 472379717,
                "reading" : 2271938470
            }


### Notify [POST]

+ Request (application/json)
    [Event][]

+ Response 200 (application/json)

    + Body

            true

