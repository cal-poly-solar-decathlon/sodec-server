FORMAT: 1A
HOST: http://calpolysolardecathlon.org:8080

# Solar Decathlon Automation
This API governs the interaction between the solar decathlon wireless client 
tablets and the central home automation server.

## Devices

REWRITE FOR INFLUXDB STARTS HERE...

## Measurements

All recorded measurements must fall into one of these measurement categories:

- `temperature`
- `humidity`
- `electric_power`
- `light_level`
- `occupied`

## Devices

Device names specify locations. Each measurement has its own set of legal
device names.

### Temperature and Humidity Devices

- `living_room`
- `bedroom`
- `kitchen`
- `outside`
- `bathroom`
- `testing_blackhole`

### Electric Power devices

In order to maintain flexibility, we're just going to go with the flow,
and accept whatever device ids come in from the eGauge. Note that no
distinction is made here between power generated and power used.


## Representing Sensor Readings

Sensor readings are encoded as signed 64-bit integers.

For temperatures, these
are 10ths of celsius degrees. So, for instance, the temperature -3.4 degrees
celsius would be represented as -34.

Humidities are reported in 10ths of
a percent of relative humidity. So, for instance, 78.4% humidity would
be represented as 784.

Light settings are specified as tenths of a percent
(like humidity). So, for instance, a light that's on would be represented
as 1000, and one set at 20% would be represented as 200.

Electrical power readings are specified in CUMULATIVE watt-seconds.
PLEASE NOTE: under some circumstances, this counter may get reset. Display
modules should be cognizant of this, and do the best they can if this
value is seen to drop.

## Implementation

Currently, the test server does not implement the resources listed as
[UNIMPLEMENTED].

# Group Server

This API describes calls that the clients make to the server.

# Ping [/srv/ping]

Checks that the server is alive.

## Ping [GET]

+ Response 200 (application/json)

    + Body

            "alive"


# Timestamp [/srv/timestamp]

The current timestamp from the server (represented as seconds since epoch
UTC on server).

## Timestamp [GET]

+ Response 200 (application/json)

    + Body

            {
                "timestamp":1418096756
            }


# List of Devices [/srv/list-old-device-ids]

BROKEN!!

List the old-style device ids

## List of Devices [GET]

+ Response 200 (application/json)

    + Body
            [{string},...]



# Device Latest Event [/srv/latest-event{?measurement,device}]

The last event of the given device.

+ Parameters
    + measurement (string) ... the kind of measurement (temperature, etc.)
    + device (string) ... the id of the selected device


## Latest Event [GET]

+ Response 200 (application/json)

    + Body
            {status}

# Post a sensor reading [/srv/record-reading{?device}]

## Record Reading [POST]

A Post request adds new data, using the server's current
timestamp. There's a (plaintext) secret used to validate
the sender. Since this request just travels over the local
wire, we don't need to worry about encrypting it. Famous
last words.

+ Request (application/json)

            {
                "status":{status},
                "secret":{secret}
            }

+ Response 200 (application/json)

    + Body

            "okay"


# Device Event Range [/srv/events-in-range{?device,start,end}]

Fetch all events in the given range. More specifically, those with
timestamps `n` such that `start <= n < end`. Currently, the difference
between 'start' and 'end' can't be greater than 3600 seconds, to
limit the size of the response.

+ Parameters
    + device (string) ... the id of the selected device
    + start (number) ... the timestamp of the beginning of the desired range
    + end (number) ... the timestamp of the end of the desired range


## Get events in a range [GET]

To save space on the wire, the data is delivered as a sequence of deltas. More
specifically, the initial timestamp and status are delivered in full. Following
this, the remainder of the readings are delivered as a sequence of sequences
of length 2, where each element contains the number of seconds since the prior
reading and the difference in the status since the last reading. If there
are no events in the range, the server returns the json string "no events".

+ Response 200 (application/json)

    + Body

            {baseTimestamp:1418096755,
             baseStatus:224,
             seriesData:[[5,5],[5,0],[5,-2],[5,4]]}

# Count Device Events [/srv/count-events-in-range{?device,start,end}

+ Parameters
    + device (string) ... the id of the selected device
    + start (number) ... the timestamp of the beginning of the desired range
    + end (number) ... the timestamp of the end of the desired range

## Count events in a range [GET]

Returns a number representing the number of events in a time range.

+ Response 200 (application/json)

    + Body

            24739

# Subscribe to Events [/srv/subscribe]

Register a client with the server, to receive all events as they occur.
NB: There's no unsubscribe; I don't think it'll ever be necessary, and
the server will have to handle disappearing subscribers anyway.
[UNIMPLEMENTED]

## Subscribe [POST]

Some authentication here might be nice.  I'm going to leave it
out for now.

+ Request (application/json)

    + Body

            {"ip":"xxx.xxx.xxx.xxx"}

+ Response 200 (application/json)

    + Body

            true


# Group Client

# Notify [/totally/bogus]

Notification that an event has occurred.

As an aside, this model (that is, apiary) is totally broken... I can't refer to a model
from outside? There are some major issues here.

## Event [/client/notify]

Messages sent from the server to a subscribed client

+ Model (application/json)

    A JSON object representing a control or sensor event

    As a side note... this JSON schema mechanism is... weak.

    + Body

            {   "type": "controlorsensor",
                "device" : "thedevicename",
                "timestamp" : 472379717,
                "reading" : 2271938470
            }


### Notify [POST]

+ Request (application/json)
    [Event][]

+ Response 200 (application/json)

    + Body

            true

